package ImagenUmbralizada;

import imagenUmbralizada.AboutFrame;
import imagenUmbralizada.ShortcutFrame;
import imagenUmbralizada.Stack;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ListIterator;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.imgcodecs.Imgcodecs;

/**
 *
 * @author Jorge
 */
public class ImagenUmbralizada extends javax.swing.JFrame {

    JFileChooser fc;
    Stack stack;
    ListIterator stackIterator;
    iteration lastCalled;

    enum iteration {
        PREVIOUS, NEXT;
    }

    public ImagenUmbralizada() {
        initComponents();
        fc = new JFileChooser();
        fc.addChoosableFileFilter(new FileNameExtensionFilter("Imágenes", "jpg", "jpeg", "png"));
        stack = new Stack<Integer>(10);
        stackIterator = stack.listIterator();
        lastCalled = iteration.NEXT;
        updateRedoUndoBarItem();
        thresholdMenuItem.setEnabled(false);
        saveMenuItem.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imageViewer = new imagenUmbralizada.ImageViewer();
        menuBar = new javax.swing.JMenuBar();
        filesMenu = new javax.swing.JMenu();
        loadMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        thresholdMenuItem = new javax.swing.JMenuItem();
        undoMenuItem = new javax.swing.JMenuItem();
        redoMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();
        shortcutsMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Umbralizador de imagen");
        setResizable(false);

        javax.swing.GroupLayout imageViewerLayout = new javax.swing.GroupLayout(imageViewer);
        imageViewer.setLayout(imageViewerLayout);
        imageViewerLayout.setHorizontalGroup(
            imageViewerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 391, Short.MAX_VALUE)
        );
        imageViewerLayout.setVerticalGroup(
            imageViewerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 268, Short.MAX_VALUE)
        );

        filesMenu.setMnemonic('F');
        filesMenu.setText("Ficheros");

        loadMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        loadMenuItem.setText("Cargar");
        loadMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadMenuItemActionPerformed(evt);
            }
        });
        filesMenu.add(loadMenuItem);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveMenuItem.setText("Guardar");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        filesMenu.add(saveMenuItem);

        menuBar.add(filesMenu);

        editMenu.setMnemonic('E');
        editMenu.setText("Edición");

        thresholdMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        thresholdMenuItem.setText("Modificar umbral");
        thresholdMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thresholdMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(thresholdMenuItem);

        undoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        undoMenuItem.setText("Deshacer");
        undoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(undoMenuItem);

        redoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        redoMenuItem.setText("Rehacer");
        redoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(redoMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('H');
        helpMenu.setText("Ayuda");

        aboutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, 0));
        aboutMenuItem.setText("Acerca de ...");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        shortcutsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, 0));
        shortcutsMenuItem.setText("Atajos");
        shortcutsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shortcutsMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(shortcutsMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imageViewer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imageViewer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadMenuItemActionPerformed
        nu.pattern.OpenCV.loadShared();
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        thresholdMenuItem.setEnabled(true);
        saveMenuItem.setEnabled(false);
        int option = fc.showOpenDialog(null);
        switch (option) {
            case JFileChooser.APPROVE_OPTION:
                File file = fc.getSelectedFile();
                Mat image;
                try {
                    image = Imgcodecs.imread(file.getAbsolutePath());
                    saveMenuItem.setEnabled(true);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Error al cargar la imagen");
                    return;
                }
                imageViewer.setImage(image);
                setBounds(0,0,image.width()+20, image.height()+65);
                break;
            case JFileChooser.CANCEL_OPTION:
                break;
            default:
                throw new AssertionError();
        }
    }//GEN-LAST:event_loadMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        int option = fc.showSaveDialog(null);
        switch (option) {
            case JFileChooser.APPROVE_OPTION:
                File file = fc.getSelectedFile();
                BufferedImage image = imageViewer.getImage();
                try {
                    ImageIO.write(image, "png", file);
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, "Error al guardar la imagen");
                }
                break;

            case JFileChooser.CANCEL_OPTION:
                break;
            default:
                throw new AssertionError();
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void thresholdMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thresholdMenuItemActionPerformed
        String res;
        int threshold = 0;
        boolean wrongFormat;
        boolean firstLoop = true;
        do {
            if (!firstLoop) {
                JOptionPane.showMessageDialog(this, "Por favor introduzca un umbral correcto");
            } else {
                firstLoop = false;
            }

            res = JOptionPane.showInputDialog(this, "Introduzca un umbral (número entre 0 y 255):");
            //If EXIT or CANCEL
            if (res == null) {
                return;
            }

            wrongFormat = false;
            try {
                threshold = Integer.parseInt(res);
            } catch (Exception e) {
                wrongFormat = true;
            }
        } while (threshold < 0 || 255 < threshold || wrongFormat);

        imageViewer.applyThreshold(threshold);
        stack.add(threshold);
        
        stackIterator = stack.listIterator();
        lastCalled = iteration.NEXT;
        updateRedoUndoBarItem();
    }//GEN-LAST:event_thresholdMenuItemActionPerformed

    private void undoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoMenuItemActionPerformed
        if (lastCalled == iteration.NEXT) {
            stackIterator.previous();
            lastCalled = iteration.PREVIOUS;
        }
        imageViewer.applyThreshold((int) stackIterator.previous());
        updateRedoUndoBarItem();
    }//GEN-LAST:event_undoMenuItemActionPerformed

    private void redoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoMenuItemActionPerformed
        if (lastCalled == iteration.PREVIOUS) {
            stackIterator.next();
            lastCalled = iteration.NEXT;
        }
        imageViewer.applyThreshold((int) stackIterator.next());
        updateRedoUndoBarItem();
    }//GEN-LAST:event_redoMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        new AboutFrame().setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void shortcutsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shortcutsMenuItemActionPerformed
        new ShortcutFrame().setVisible(true);
    }//GEN-LAST:event_shortcutsMenuItemActionPerformed

    private void updateRedoUndoBarItem() {
        undoMenuItem.setEnabled(stackIterator.hasPrevious());
        redoMenuItem.setEnabled(stackIterator.hasNext());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImagenUmbralizada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImagenUmbralizada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImagenUmbralizada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImagenUmbralizada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ImagenUmbralizada().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu filesMenu;
    private javax.swing.JMenu helpMenu;
    private imagenUmbralizada.ImageViewer imageViewer;
    private javax.swing.JMenuItem loadMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem redoMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JMenuItem shortcutsMenuItem;
    private javax.swing.JMenuItem thresholdMenuItem;
    private javax.swing.JMenuItem undoMenuItem;
    // End of variables declaration//GEN-END:variables
}
